@page "/"
@using BlazorML5
@using BlazorML5.Helpers
@inject IJSRuntime runtime

<PageTitle>Index</PageTitle>
<button @onclick="AddData">Add Data</button>
@code
{
    NeuralNetwork _network;
    protected override async Task OnInitializedAsync()
    {
        await ML5.InitAsync(runtime);

        _network = await NeuralNetwork.CreateAsync(new NeuralNetworkOptions()
        {
            Task = TaskType.Classification,
            DataUrl = "https://raw.githubusercontent.com/ml5js/ml5-library/main/examples/p5js/NeuralNetwork/NeuralNetwork_color_classifier/data/colorData_small.json",
            Debug = true,
            Inputs = new object[]{"r", "g", "b"},
            Outputs = new object[]{"label"}
        });
        _network.OnTraining+=(l,e)=>
        {
            Console.WriteLine($"Training: {e}%");
        };
        _network.OnTrainingComplete+=async ()=>
        {
            Console.WriteLine($"Training Complete");
            await _network.ClassifyMultipleAsync(new object[]{new object[]{12,13,14},new object[]{15,16,17}});
        };
        _network.OnDataLoaded+=(e)=>
        {
            Console.WriteLine($"Data Loaded");
        };
        _network.OnClassify+=async (l,e)=>
        {
            Console.WriteLine(e.Length);
            Console.WriteLine(e[0].Label);
        };
        _network.OnClassifyMultiple+=async (l,e)=>
        {
            Console.WriteLine(e.Length);
            Console.WriteLine(e[0].Length);
            Console.WriteLine(e[0][0].Label);
        };

    }
    async void AddData()
    {
        //await _network.AddDataAsync(new object[]{ 1},new object[]{1 });
        //await _network.AddDataAsync(new object[]{ 2},new object[]{4 });
        //await _network.AddDataAsync(new object[]{ 3},new object[]{6 });
        //await _network.AddDataAsync(new object[]{ 3},new object[]{6 });
        //await _network.AddDataAsync(new object[]{ 3},new object[]{6 });
        //await _network.AddDataAsync(new object[]{ 3},new object[]{6 });
        //await _network.NormalizeDataAsync();
        await _network.TrainAsync();
    }

}