@page "/nn"
@using BlazorML5
@using BlazorML5.Helpers
@using System.Text.Json.Serialization
@inject IJSRuntime runtime
@inject HttpClient Http

<MudText Color="Color.Success" class="mx-10 my-8" Typo="Typo.h4">Neural Network</MudText>

@if (!IsDatasetLoaded)
{
    <MudAlert Severity="Severity.Warning" class="my-8 mx-10">
        <span>
            loading and training on Dataset please wait for some time
        </span><br /><br />
        <MudProgressCircular Color="Color.Warning" Indeterminate="true" />
    </MudAlert>
}
else
{
    <MudPaper Class="ma-2 mx-4 my-4" Outlined="true">
        <MudText class="mx-4 mb-4" Typo="Typo.h6">Titanic Dataset Example </MudText>
        <MudSelect T="string" class="mb-4" Label="Gender" Variant="Variant.Outlined" @bind-Value="_gender">
            <MudSelectItem T="string" Value="@("male")" />
            <MudSelectItem T="string" Value="@("female")" />
        </MudSelect>
        <MudSelect T="string" class="mb-4" Label="Fare Class" Variant="Variant.Outlined" @bind-Value="_fareClass">
            <MudSelectItem T="string" Value="@("first")" />
            <MudSelectItem T="string" Value="@("second")" />
            <MudSelectItem T="string" Value="@("third")" />
        </MudSelect>
        <MudNumericField @bind-Value="_age" Label="Age (Yrs)" Variant="Variant.Outlined" />
        <MudNumericField @bind-Value="_fare" Label="Fare (0-1000)" Variant="Variant.Outlined" />

        <MudButton Color="Color.Success" class="my-4 mx-4" Variant="Variant.Filled" OnClick="ClassifyAsync">
            Predict
        </MudButton>

        <div class="my-4">
            @if(result is not null || error is not null)
            {
            <MudAlert Severity="IsError?Severity.Error:Severity.Normal" Variant="Variant.Outlined">
                @if(IsError)
                {
                    <span>@error</span>
                }
                else if(result is not null)
                {
                    <span>Person : @result</span>
                }
            </MudAlert>
            }
        </div>
    </MudPaper>

}



@code
{
    #nullable disable

    private bool IsDatasetLoaded = false, IsError=false;

    private NeuralNetwork _neuralNetwork;

    private string _gender, _fareClass;
    private int _age=60, _fare=1000;

    private string result,error;
    protected override async Task OnInitializedAsync()
    {
        await Ml5.InitAsync(runtime);
        NeuralNetworkOptions options = new NeuralNetworkOptions()
            {
                Inputs = 4,
                Outputs = 1,
                Task = TaskType.Classification,
                Debug = true
            };
        _neuralNetwork = await Ml5.NeuralNetworkAsync(options);
        _neuralNetwork.OnTrainingComplete += TrainingComplete;
        _neuralNetwork.OnClassify += OnClassification;
        await LoadDataAsync();
        await StartTrainAsync();
    }
    private async Task LoadDataAsync()
    {
        var dataset = await Http.GetFromJsonAsync<Data[]>("data/titanic.json");
        foreach (var data in dataset)
        {
            await _neuralNetwork
                .AddDataAsync(
                    new object[]
                    {
                        data.Age, data.Fare, data.FareClass, data.Sex
                    }
                , new object[] { data.Survived });
        }
        await _neuralNetwork.NormalizeDataAsync();

        Console.WriteLine("Added Dataset of size : " + dataset.Length);


    }
    private Task StartTrainAsync()
    {
        NeuralNetworkTrainOptions options = new()
            {
                Epochs = 10,
                BatchSize = 32
            };
        return _neuralNetwork.TrainAsync(options);
    }

    private void TrainingComplete()
    {
        IsDatasetLoaded = true;
        StateHasChanged();
    }
    private Task ClassifyAsync(MouseEventArgs _)
    {
        _gender ??= "male";
        _fareClass ??= "first";
        StateHasChanged();
        return _neuralNetwork.ClassifyAsync(new object[] { _age, _fare, _fareClass, _gender });
    }

    private void OnClassification(string error,ClassificationResult[] results)
    {
        result = results[0].Label;
        if (IsError=(!string.IsNullOrWhiteSpace(error)))
            this.error = error;
        StateHasChanged();
    }
    class Data
    {
        [JsonPropertyName("survived")]
        public string Survived { get; set; }
        [JsonPropertyName("fare_class")]
        public string FareClass { get; set; }
        [JsonPropertyName("sex")]
        public string Sex { get; set; }
        [JsonPropertyName("age")]
        public int Age { get; set; }
        [JsonPropertyName("fare")]
        public int Fare { get; set; }
    }
#nullable restore
}